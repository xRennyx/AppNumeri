import java.util.Scanner;
import java.util.Random;

public class AppNumeri
{
    public static void main(String[] args)
    {
        Scanner sc= new Scanner(System.in);
        int opz;
        boolean fine=true;
        int casuale;
        int n;
        int [] vetNumeri=null;
        do
        {
            cls();
            System.out.println("Seleziona un'opzione");
            menu();
            opz= sc.nextInt();

            switch(opz)
            {
                case 1: System.out.println("Genera Numeri");
                n= sc.nextInt();
                vetNumeri=caricaVettore(n);
                break;
                case 2: System.out.println("Visualizza Numeri");
                if(vetNumeri!=null)
                {
                    System.out.println("Vettore originale:");
                    stampaVettore(vetNumeri);
                }
                else System.out.println("Non Ã¨ stato creato il vettore");
                break;
                case 3: System.out.println("Numeri Pari");
                int countPari=0;
                    for (int num : vetNumeri)
                    {
                        if (num % 2 == 0) {
                            countPari++;
                        }
                    }
                    int[] vettorePari = new int[countPari];
                    int index = 0;
                    for (int num : vetNumeri) {
                        if (num % 2 == 0) {
                            vettorePari[index] = num;
                            index++;
                        }
                    }
                    System.out.println("Vettore con numeri pari:");
                    stampaVettore(vettorePari);
                break;
                case 4: System.out.println("Numeri Dispari:");
                    int countDispari=0;
                    for (int num : vetNumeri)
                    {
                        if (num % 2 != 0) {
                            countDispari++;
                        }
                    }
                    int[] vettoreDispari = new int[countDispari];
                    int indax = 0;
                    for (int num : vetNumeri) {
                        if (num % 2 != 0) {
                            vettoreDispari[indax] = num;
                            indax++;
                        }
                    }
                    System.out.println("Vettore con numeri pari:");
                    stampaVettore(vettoreDispari);
                break;
                case 5: System.out.println("Exit");
                fine=false;
                break;
                default: System.out.println("Opzione errata");
            }attesa(2000);
        }while(fine==true);

    }
    private static void menu ()
    {
        System.out.println("== App numeri Casuali");
        System.out.println("[1] Genera Numeri");
        System.out.println("[2] Visualizza Numeri");
        System.out.println("[3] Numeri Pari");
        System.out.println("[4] Dispari");
        System.out.println("[5] Exit");
    }
    private static int[] caricaVettore(int n)
    {
        int casuale;
        int[] vettore = new int[n];
        Random rn = new Random();
        for (int i = 0; i < n; i++) {
            casuale = rn.nextInt(101);
            vettore[i] = casuale;
        }
        return vettore;
    }
    private static void stampaVettore(int[] vettore)
    {
        for (int num : vettore) {
            System.out.println(num);
        }
    }
    private static int[] filtraNumeriPari(int[] vettore) {
        int countPari = 0;
        // Conta quanti numeri pari ci sono nel vettore
        for (int num : vettore) {
            if (num % 2 == 0) {
                countPari++;
            }
        }

        int[] vettorePari = new int[countPari];
        int index = 0;
        // Copia i numeri pari nel nuovo vettore
        for (int num : vettore) {
            if (num % 2 == 0) {
                vettorePari[index] = num;
                index++;
            }
        }

        return vettorePari;
    }

    public static void cls()
    {
        try {
            new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void attesa(int secondi)
    {
        try {
            Thread.sleep(secondi);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

}
